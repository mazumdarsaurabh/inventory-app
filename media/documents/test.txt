from django.test import TestCase, Client
from django.urls import reverse
from django.contrib.auth.models import User
from .models import BankAccount, Transaction
from .forms import DepositForm, WithdrawForm
from django.db import transaction

class CoreTests(TestCase):

    def setUp(self):
        self.client = Client()
        self.user = User.objects.create_user(username='testuser', password='testpassword')
        self.account = BankAccount.objects.create(user=self.user, balance=1000.00)
        self.login_url = reverse('core:login')
        self.dashboard_url = reverse('core:dashboard')
        self.deposit_url = reverse('core:deposit')
        self.withdraw_url = reverse('core:withdraw')

    def test_user_registration(self):
        register_url = reverse('core:register')
        response = self.client.post(register_url, {
            'username': 'newuser',
            'email': 'newuser@example.com',
            'password': 'newpassword',
            'password2': 'newpassword',  # Add confirmation field
        })
        self.assertEqual(response.status_code, 302)  # Check for redirect after successful registration
        self.assertEqual(User.objects.count(), 2)
        self.assertEqual(BankAccount.objects.count(), 2) # Check that BankAccount is created

    def test_user_login(self):
        response = self.client.post(self.login_url, {
            'username': 'testuser',
            'password': 'testpassword',
        })
        self.assertEqual(response.status_code, 302)
        self.assertTrue(self.client.session.get('_auth_user_id'))

    def test_user_login_failure(self):
        response = self.client.post(self.login_url, {
            'username': 'testuser',
            'password': 'wrongpassword',
        })
        self.assertEqual(response.status_code, 200)
        self.assertFalse(self.client.session.get('_auth_user_id'))

    def test_user_logout(self):
        self.client.login(username='testuser', password='testpassword')
        response = self.client.get(reverse('core:logout'))
        self.assertEqual(response.status_code, 302)
        self.assertFalse(self.client.session.get('_auth_user_id'))

    def test_dashboard_view(self):
        self.client.login(username='testuser', password='testpassword')
        response = self.client.get(self.dashboard_url)
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Welcome, testuser')
        self.assertContains(response, 'Your current account balance is: $1000.00')

    def test_deposit_view(self):
        self.client.login(username='testuser', password='testpassword')
        response = self.client.get(self.deposit_url)
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Deposit')

    def test_deposit_successful(self):
        self.client.login(username='testuser', password='testpassword')
        response = self.client.post(self.deposit_url, {'amount': 200.00})
        self.assertEqual(response.status_code, 302)  # Redirect after successful deposit
        self.account.refresh_from_db()
        self.assertEqual(self.account.balance, 1200.00)

    def test_deposit_invalid_amount(self):
        self.client.login(username='testuser', password='testpassword')
        response = self.client.post(self.deposit_url, {'amount': -100.00})
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Deposit failed')
        self.account.refresh_from_db()
        self.assertEqual(self.account.balance, 1000.00)  # Balance should not change

    def test_withdraw_view(self):
        self.client.login(username='testuser', password='testpassword')
        response = self.client.get(self.withdraw_url)
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Withdraw')

    def test_withdraw_successful(self):
        self.client.login(username='testuser', password='testpassword')
        response = self.client.post(self.withdraw_url, {'amount': 300.00})
        self.assertEqual(response.status_code, 302)
        self.account.refresh_from_db()
        self.assertEqual(self.account.balance, 700.00)

    def test_withdraw_insufficient_funds(self):
        self.client.login(username='testuser', password='testpassword')
        response = self.client.post(self.withdraw_url, {'amount': 1500.00})
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Insufficient funds')
        self.account.refresh_from_db()
        self.assertEqual(self.account.balance, 1000.00)

    def test_withdraw_invalid_amount(self):
        self.client.login(username='testuser', password='testpassword')
        response = self.client.post(self.withdraw_url, {'amount': -50.00})
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 'Withdrawal failed')
        self.account.refresh_from_db()
        self.assertEqual(self.account.balance, 1000.00)
